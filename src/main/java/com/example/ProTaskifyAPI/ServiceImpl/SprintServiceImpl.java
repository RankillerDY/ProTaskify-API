package com.example.ProTaskifyAPI.ServiceImpl;

import com.example.ProTaskifyAPI.DTO.ResponseObject;
import com.example.ProTaskifyAPI.DTO.Resquest.CreateSprintRequest;
import com.example.ProTaskifyAPI.Models.Process;
import com.example.ProTaskifyAPI.Models.ProcessCompositeKey;
import com.example.ProTaskifyAPI.Models.Sprint;
import com.example.ProTaskifyAPI.Repositories.ProcessRepo;
import com.example.ProTaskifyAPI.Repositories.ProjectRepo;
import com.example.ProTaskifyAPI.Repositories.SprintRepo;
import com.example.ProTaskifyAPI.Services.SprintService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class SprintServiceImpl implements SprintService {
  private final SprintRepo sprintRepo;
  private final ProjectRepo projectRepo;
  private final ProcessRepo processRepo;

  @Override
  public ResponseEntity<ResponseObject> createSprint(
      Integer projectId, CreateSprintRequest sprintRequest) {
    try {
      Sprint sprint =
          Sprint.builder()
              .sprint_name(sprintRequest.getSprint_name())
              .end_date(sprintRequest.getEnd_date())
              .deleted(false)
              .start_date(sprintRequest.getStart_date())
              .feedback(sprintRequest.getFeedback())
              .status("Pending")
              .build();
      var savedSprint = sprintRepo.save(sprint);
      autoGenerated_Process(savedSprint, projectId);
      return ResponseEntity.ok(new ResponseObject("Successful", "Created sprint", savedSprint));
    } catch (Exception e) {
      return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new ResponseObject("Successful", "Created sprint", null)));
    }
  }

  public void autoGenerated_Process(Sprint sprint, Integer projectId) {
    var project = projectRepo.findById(projectId).orElse(null);
    if (project != null) {
      Process process =
          Process.builder()
              .id(
                  ProcessCompositeKey.builder()
                      .feature(null)
                      .project(projectId)
                      .sprint(sprint.getSprint_id())
                      .build())
              .project(project)
              .sprint(sprint)
              .feature(null)
              .build();
      processRepo.save(process);
    }
  }
}
